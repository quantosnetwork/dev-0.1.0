// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: quantos/pkg/v1/blockchain.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BlockType int32

const (
	BlockType_DEFAULT    BlockType = 0
	BlockType_GENESIS    BlockType = 1
	BlockType_SPECIAL    BlockType = 2
	BlockType_CHAIN_DATA BlockType = 3
	BlockType_NEW_EPOCH  BlockType = 4
)

// Enum value maps for BlockType.
var (
	BlockType_name = map[int32]string{
		0: "DEFAULT",
		1: "GENESIS",
		2: "SPECIAL",
		3: "CHAIN_DATA",
		4: "NEW_EPOCH",
	}
	BlockType_value = map[string]int32{
		"DEFAULT":    0,
		"GENESIS":    1,
		"SPECIAL":    2,
		"CHAIN_DATA": 3,
		"NEW_EPOCH":  4,
	}
)

func (x BlockType) Enum() *BlockType {
	p := new(BlockType)
	*p = x
	return p
}

func (x BlockType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockType) Descriptor() protoreflect.EnumDescriptor {
	return file_quantos_pkg_v1_blockchain_proto_enumTypes[0].Descriptor()
}

func (BlockType) Type() protoreflect.EnumType {
	return &file_quantos_pkg_v1_blockchain_proto_enumTypes[0]
}

func (x BlockType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockType.Descriptor instead.
func (BlockType) EnumDescriptor() ([]byte, []int) {
	return file_quantos_pkg_v1_blockchain_proto_rawDescGZIP(), []int{0}
}

type BlockStates int32

const (
	BlockStates_NEW                BlockStates = 0
	BlockStates_PENDING_VALIDATION BlockStates = 1
	BlockStates_VALID              BlockStates = 2
	BlockStates_PENDING_SIGNATURES BlockStates = 3
	BlockStates_SIGNED             BlockStates = 4
	BlockStates_FINALIZED          BlockStates = 5
	BlockStates_ACCEPT_TX          BlockStates = 6
)

// Enum value maps for BlockStates.
var (
	BlockStates_name = map[int32]string{
		0: "NEW",
		1: "PENDING_VALIDATION",
		2: "VALID",
		3: "PENDING_SIGNATURES",
		4: "SIGNED",
		5: "FINALIZED",
		6: "ACCEPT_TX",
	}
	BlockStates_value = map[string]int32{
		"NEW":                0,
		"PENDING_VALIDATION": 1,
		"VALID":              2,
		"PENDING_SIGNATURES": 3,
		"SIGNED":             4,
		"FINALIZED":          5,
		"ACCEPT_TX":          6,
	}
)

func (x BlockStates) Enum() *BlockStates {
	p := new(BlockStates)
	*p = x
	return p
}

func (x BlockStates) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockStates) Descriptor() protoreflect.EnumDescriptor {
	return file_quantos_pkg_v1_blockchain_proto_enumTypes[1].Descriptor()
}

func (BlockStates) Type() protoreflect.EnumType {
	return &file_quantos_pkg_v1_blockchain_proto_enumTypes[1]
}

func (x BlockStates) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockStates.Descriptor instead.
func (BlockStates) EnumDescriptor() ([]byte, []int) {
	return file_quantos_pkg_v1_blockchain_proto_rawDescGZIP(), []int{1}
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId       string       `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Head          *BlockHeader `protobuf:"bytes,2,opt,name=head,proto3" json:"head,omitempty"`
	Nonce         uint32       `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ValidatorAddr string       `protobuf:"bytes,5,opt,name=ValidatorAddr,proto3" json:"ValidatorAddr,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quantos_pkg_v1_blockchain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_quantos_pkg_v1_blockchain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_quantos_pkg_v1_blockchain_proto_rawDescGZIP(), []int{0}
}

func (x *Block) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *Block) GetHead() *BlockHeader {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *Block) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Block) GetValidatorAddr() string {
	if x != nil {
		return x.ValidatorAddr
	}
	return ""
}

type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload [][]byte `protobuf:"bytes,1,rep,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Payload) Reset() {
	*x = Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quantos_pkg_v1_blockchain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_quantos_pkg_v1_blockchain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_quantos_pkg_v1_blockchain_proto_rawDescGZIP(), []int{1}
}

func (x *Payload) GetPayload() [][]byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Blockchain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId        string       `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Version        string       `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	GenesisHash    string       `protobuf:"bytes,3,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis_hash,omitempty"`
	MerkleRoot     string       `protobuf:"bytes,4,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	Blocks         []*Block     `protobuf:"bytes,5,rep,name=blocks,proto3" json:"blocks,omitempty"`
	NumBlocks      int32        `protobuf:"varint,6,opt,name=num_blocks,json=numBlocks,proto3" json:"num_blocks,omitempty"`
	NumTx          int32        `protobuf:"varint,7,opt,name=num_tx,json=numTx,proto3" json:"num_tx,omitempty"`
	BlockchainHead *Block       `protobuf:"bytes,8,opt,name=blockchain_head,json=blockchainHead,proto3" json:"blockchain_head,omitempty"`
	Validators     []*Validator `protobuf:"bytes,9,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (x *Blockchain) Reset() {
	*x = Blockchain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quantos_pkg_v1_blockchain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blockchain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blockchain) ProtoMessage() {}

func (x *Blockchain) ProtoReflect() protoreflect.Message {
	mi := &file_quantos_pkg_v1_blockchain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blockchain.ProtoReflect.Descriptor instead.
func (*Blockchain) Descriptor() ([]byte, []int) {
	return file_quantos_pkg_v1_blockchain_proto_rawDescGZIP(), []int{2}
}

func (x *Blockchain) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *Blockchain) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Blockchain) GetGenesisHash() string {
	if x != nil {
		return x.GenesisHash
	}
	return ""
}

func (x *Blockchain) GetMerkleRoot() string {
	if x != nil {
		return x.MerkleRoot
	}
	return ""
}

func (x *Blockchain) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *Blockchain) GetNumBlocks() int32 {
	if x != nil {
		return x.NumBlocks
	}
	return 0
}

func (x *Blockchain) GetNumTx() int32 {
	if x != nil {
		return x.NumTx
	}
	return 0
}

func (x *Blockchain) GetBlockchainHead() *Block {
	if x != nil {
		return x.BlockchainHead
	}
	return nil
}

func (x *Blockchain) GetValidators() []*Validator {
	if x != nil {
		return x.Validators
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Stake    uint64                 `protobuf:"varint,2,opt,name=stake,proto3" json:"stake,omitempty"`
	Address  string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	LastSeen *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quantos_pkg_v1_blockchain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_quantos_pkg_v1_blockchain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_quantos_pkg_v1_blockchain_proto_rawDescGZIP(), []int{3}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node) GetStake() uint64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *Node) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Node) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

type Validator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *Node `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *Validator) Reset() {
	*x = Validator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quantos_pkg_v1_blockchain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validator) ProtoMessage() {}

func (x *Validator) ProtoReflect() protoreflect.Message {
	mi := &file_quantos_pkg_v1_blockchain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validator.ProtoReflect.Descriptor instead.
func (*Validator) Descriptor() ([]byte, []int) {
	return file_quantos_pkg_v1_blockchain_proto_rawDescGZIP(), []int{4}
}

func (x *Validator) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockType          BlockType              `protobuf:"varint,1,opt,name=block_type,json=blockType,proto3,enum=quantos.pkg.v1.BlockType" json:"block_type,omitempty"`
	Index              uint64                 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Height             uint64                 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	ChainId            string                 `protobuf:"bytes,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Version            string                 `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Hash               string                 `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	ParentHash         string                 `protobuf:"bytes,7,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	MerkleRoot         []byte                 `protobuf:"bytes,8,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	TxMerkleRoot       []byte                 `protobuf:"bytes,9,opt,name=tx_merkle_root,json=txMerkleRoot,proto3" json:"tx_merkle_root,omitempty"`
	ReceiptsMerkleRoot []byte                 `protobuf:"bytes,10,opt,name=receipts_merkle_root,json=receiptsMerkleRoot,proto3" json:"receipts_merkle_root,omitempty"`
	Timestamp          *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Number             int32                  `protobuf:"varint,12,opt,name=number,proto3" json:"number,omitempty"`
	Size               int64                  `protobuf:"varint,13,opt,name=size,proto3" json:"size,omitempty"`
	NumTx              int64                  `protobuf:"varint,14,opt,name=num_tx,json=numTx,proto3" json:"num_tx,omitempty"`
	CreationTx         string                 `protobuf:"bytes,15,opt,name=creation_tx,json=creationTx,proto3" json:"creation_tx,omitempty"`
	BlockStates        []BlockStates          `protobuf:"varint,16,rep,packed,name=block_states,json=blockStates,proto3,enum=quantos.pkg.v1.BlockStates" json:"block_states,omitempty"`
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quantos_pkg_v1_blockchain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_quantos_pkg_v1_blockchain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_quantos_pkg_v1_blockchain_proto_rawDescGZIP(), []int{5}
}

func (x *BlockHeader) GetBlockType() BlockType {
	if x != nil {
		return x.BlockType
	}
	return BlockType_DEFAULT
}

func (x *BlockHeader) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BlockHeader) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockHeader) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *BlockHeader) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BlockHeader) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BlockHeader) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *BlockHeader) GetMerkleRoot() []byte {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

func (x *BlockHeader) GetTxMerkleRoot() []byte {
	if x != nil {
		return x.TxMerkleRoot
	}
	return nil
}

func (x *BlockHeader) GetReceiptsMerkleRoot() []byte {
	if x != nil {
		return x.ReceiptsMerkleRoot
	}
	return nil
}

func (x *BlockHeader) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *BlockHeader) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *BlockHeader) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BlockHeader) GetNumTx() int64 {
	if x != nil {
		return x.NumTx
	}
	return 0
}

func (x *BlockHeader) GetCreationTx() string {
	if x != nil {
		return x.CreationTx
	}
	return ""
}

func (x *BlockHeader) GetBlockStates() []BlockStates {
	if x != nil {
		return x.BlockStates
	}
	return nil
}

type BlockchainSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId   string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	Version     string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	GenesisHash string `protobuf:"bytes,3,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis_hash,omitempty"`
}

func (x *BlockchainSyncRequest) Reset() {
	*x = BlockchainSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quantos_pkg_v1_blockchain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockchainSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockchainSyncRequest) ProtoMessage() {}

func (x *BlockchainSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quantos_pkg_v1_blockchain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockchainSyncRequest.ProtoReflect.Descriptor instead.
func (*BlockchainSyncRequest) Descriptor() ([]byte, []int) {
	return file_quantos_pkg_v1_blockchain_proto_rawDescGZIP(), []int{6}
}

func (x *BlockchainSyncRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *BlockchainSyncRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BlockchainSyncRequest) GetGenesisHash() string {
	if x != nil {
		return x.GenesisHash
	}
	return ""
}

type BlockchainSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Success bool     `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Blocks  []*Block `protobuf:"bytes,3,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *BlockchainSyncResponse) Reset() {
	*x = BlockchainSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quantos_pkg_v1_blockchain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockchainSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockchainSyncResponse) ProtoMessage() {}

func (x *BlockchainSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quantos_pkg_v1_blockchain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockchainSyncResponse.ProtoReflect.Descriptor instead.
func (*BlockchainSyncResponse) Descriptor() ([]byte, []int) {
	return file_quantos_pkg_v1_blockchain_proto_rawDescGZIP(), []int{7}
}

func (x *BlockchainSyncResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *BlockchainSyncResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BlockchainSyncResponse) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type BlockHeadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId   string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	Version     string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	GenesisHash string `protobuf:"bytes,3,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis_hash,omitempty"`
	All         bool   `protobuf:"varint,4,opt,name=all,proto3" json:"all,omitempty"`
	From        uint32 `protobuf:"varint,5,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *BlockHeadersRequest) Reset() {
	*x = BlockHeadersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quantos_pkg_v1_blockchain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeadersRequest) ProtoMessage() {}

func (x *BlockHeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quantos_pkg_v1_blockchain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeadersRequest.ProtoReflect.Descriptor instead.
func (*BlockHeadersRequest) Descriptor() ([]byte, []int) {
	return file_quantos_pkg_v1_blockchain_proto_rawDescGZIP(), []int{8}
}

func (x *BlockHeadersRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *BlockHeadersRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BlockHeadersRequest) GetGenesisHash() string {
	if x != nil {
		return x.GenesisHash
	}
	return ""
}

func (x *BlockHeadersRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *BlockHeadersRequest) GetFrom() uint32 {
	if x != nil {
		return x.From
	}
	return 0
}

type BlockHeadersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error        bool           `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Success      bool           `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	BlockHeaders []*BlockHeader `protobuf:"bytes,3,rep,name=block_headers,json=blockHeaders,proto3" json:"block_headers,omitempty"`
}

func (x *BlockHeadersResponse) Reset() {
	*x = BlockHeadersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quantos_pkg_v1_blockchain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeadersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeadersResponse) ProtoMessage() {}

func (x *BlockHeadersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quantos_pkg_v1_blockchain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeadersResponse.ProtoReflect.Descriptor instead.
func (*BlockHeadersResponse) Descriptor() ([]byte, []int) {
	return file_quantos_pkg_v1_blockchain_proto_rawDescGZIP(), []int{9}
}

func (x *BlockHeadersResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *BlockHeadersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BlockHeadersResponse) GetBlockHeaders() []*BlockHeader {
	if x != nil {
		return x.BlockHeaders
	}
	return nil
}

var File_quantos_pkg_v1_blockchain_proto protoreflect.FileDescriptor

var file_quantos_pkg_v1_blockchain_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x76,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x01,
	0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x04, 0x68,
	0x65, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x22,
	0x23, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0xe5, 0x02, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2d, 0x0a, 0x06,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x75, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6e, 0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x5f, 0x74, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x75, 0x6d, 0x54,
	0x78, 0x12, 0x3e, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x6f, 0x73, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x7f, 0x0a, 0x04,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x22, 0x35, 0x0a,
	0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x6f, 0x73, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x22, 0xb6, 0x04, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x6f, 0x73, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x6d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x74, 0x78, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x73, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x78, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x75, 0x6d, 0x54, 0x78, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x78, 0x12, 0x3e, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x73, 0x0a,
	0x15, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x77, 0x0a, 0x16, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x06,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x13,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x40,
	0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x6f, 0x73, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x2a, 0x51, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45,
	0x4e, 0x45, 0x53, 0x49, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x45, 0x57, 0x5f, 0x45, 0x50, 0x4f, 0x43,
	0x48, 0x10, 0x04, 0x2a, 0x7b, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x53, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x54, 0x58, 0x10, 0x06,
	0x32, 0xde, 0x01, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53,
	0x79, 0x6e, 0x63, 0x12, 0x68, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x25, 0x2e, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x62, 0x0a,
	0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x6f, 0x73, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x6f, 0x73, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x6f, 0x73, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x64,
	0x65, 0x76, 0x2d, 0x30, 0x2e, 0x31, 0x2e, 0x30, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_quantos_pkg_v1_blockchain_proto_rawDescOnce sync.Once
	file_quantos_pkg_v1_blockchain_proto_rawDescData = file_quantos_pkg_v1_blockchain_proto_rawDesc
)

func file_quantos_pkg_v1_blockchain_proto_rawDescGZIP() []byte {
	file_quantos_pkg_v1_blockchain_proto_rawDescOnce.Do(func() {
		file_quantos_pkg_v1_blockchain_proto_rawDescData = protoimpl.X.CompressGZIP(file_quantos_pkg_v1_blockchain_proto_rawDescData)
	})
	return file_quantos_pkg_v1_blockchain_proto_rawDescData
}

var file_quantos_pkg_v1_blockchain_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_quantos_pkg_v1_blockchain_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_quantos_pkg_v1_blockchain_proto_goTypes = []interface{}{
	(BlockType)(0),                 // 0: quantos.pkg.v1.BlockType
	(BlockStates)(0),               // 1: quantos.pkg.v1.BlockStates
	(*Block)(nil),                  // 2: quantos.pkg.v1.Block
	(*Payload)(nil),                // 3: quantos.pkg.v1.Payload
	(*Blockchain)(nil),             // 4: quantos.pkg.v1.Blockchain
	(*Node)(nil),                   // 5: quantos.pkg.v1.Node
	(*Validator)(nil),              // 6: quantos.pkg.v1.Validator
	(*BlockHeader)(nil),            // 7: quantos.pkg.v1.BlockHeader
	(*BlockchainSyncRequest)(nil),  // 8: quantos.pkg.v1.BlockchainSyncRequest
	(*BlockchainSyncResponse)(nil), // 9: quantos.pkg.v1.BlockchainSyncResponse
	(*BlockHeadersRequest)(nil),    // 10: quantos.pkg.v1.BlockHeadersRequest
	(*BlockHeadersResponse)(nil),   // 11: quantos.pkg.v1.BlockHeadersResponse
	(*timestamppb.Timestamp)(nil),  // 12: google.protobuf.Timestamp
}
var file_quantos_pkg_v1_blockchain_proto_depIdxs = []int32{
	7,  // 0: quantos.pkg.v1.Block.head:type_name -> quantos.pkg.v1.BlockHeader
	2,  // 1: quantos.pkg.v1.Blockchain.blocks:type_name -> quantos.pkg.v1.Block
	2,  // 2: quantos.pkg.v1.Blockchain.blockchain_head:type_name -> quantos.pkg.v1.Block
	6,  // 3: quantos.pkg.v1.Blockchain.validators:type_name -> quantos.pkg.v1.Validator
	12, // 4: quantos.pkg.v1.Node.last_seen:type_name -> google.protobuf.Timestamp
	5,  // 5: quantos.pkg.v1.Validator.node:type_name -> quantos.pkg.v1.Node
	0,  // 6: quantos.pkg.v1.BlockHeader.block_type:type_name -> quantos.pkg.v1.BlockType
	12, // 7: quantos.pkg.v1.BlockHeader.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 8: quantos.pkg.v1.BlockHeader.block_states:type_name -> quantos.pkg.v1.BlockStates
	2,  // 9: quantos.pkg.v1.BlockchainSyncResponse.blocks:type_name -> quantos.pkg.v1.Block
	7,  // 10: quantos.pkg.v1.BlockHeadersResponse.block_headers:type_name -> quantos.pkg.v1.BlockHeader
	8,  // 11: quantos.pkg.v1.BlockchainSync.RequestBlockchainSync:input_type -> quantos.pkg.v1.BlockchainSyncRequest
	10, // 12: quantos.pkg.v1.BlockchainSync.RequestBlockHeaders:input_type -> quantos.pkg.v1.BlockHeadersRequest
	9,  // 13: quantos.pkg.v1.BlockchainSync.RequestBlockchainSync:output_type -> quantos.pkg.v1.BlockchainSyncResponse
	11, // 14: quantos.pkg.v1.BlockchainSync.RequestBlockHeaders:output_type -> quantos.pkg.v1.BlockHeadersResponse
	13, // [13:15] is the sub-list for method output_type
	11, // [11:13] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_quantos_pkg_v1_blockchain_proto_init() }
func file_quantos_pkg_v1_blockchain_proto_init() {
	if File_quantos_pkg_v1_blockchain_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_quantos_pkg_v1_blockchain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quantos_pkg_v1_blockchain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quantos_pkg_v1_blockchain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blockchain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quantos_pkg_v1_blockchain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quantos_pkg_v1_blockchain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quantos_pkg_v1_blockchain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quantos_pkg_v1_blockchain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockchainSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quantos_pkg_v1_blockchain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockchainSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quantos_pkg_v1_blockchain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeadersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quantos_pkg_v1_blockchain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeadersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_quantos_pkg_v1_blockchain_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_quantos_pkg_v1_blockchain_proto_goTypes,
		DependencyIndexes: file_quantos_pkg_v1_blockchain_proto_depIdxs,
		EnumInfos:         file_quantos_pkg_v1_blockchain_proto_enumTypes,
		MessageInfos:      file_quantos_pkg_v1_blockchain_proto_msgTypes,
	}.Build()
	File_quantos_pkg_v1_blockchain_proto = out.File
	file_quantos_pkg_v1_blockchain_proto_rawDesc = nil
	file_quantos_pkg_v1_blockchain_proto_goTypes = nil
	file_quantos_pkg_v1_blockchain_proto_depIdxs = nil
}
