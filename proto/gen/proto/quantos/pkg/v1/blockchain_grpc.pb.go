// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: quantos/pkg/v1/blockchain.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockchainSyncClient is the client API for BlockchainSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockchainSyncClient interface {
	RequestBlockchainSync(ctx context.Context, in *BlockchainSyncRequest, opts ...grpc.CallOption) (BlockchainSync_RequestBlockchainSyncClient, error)
	RequestBlockHeaders(ctx context.Context, in *BlockHeadersRequest, opts ...grpc.CallOption) (BlockchainSync_RequestBlockHeadersClient, error)
}

type blockchainSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainSyncClient(cc grpc.ClientConnInterface) BlockchainSyncClient {
	return &blockchainSyncClient{cc}
}

func (c *blockchainSyncClient) RequestBlockchainSync(ctx context.Context, in *BlockchainSyncRequest, opts ...grpc.CallOption) (BlockchainSync_RequestBlockchainSyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlockchainSync_ServiceDesc.Streams[0], "/quantos.pkg.v1.BlockchainSync/RequestBlockchainSync", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockchainSyncRequestBlockchainSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockchainSync_RequestBlockchainSyncClient interface {
	Recv() (*BlockchainSyncResponse, error)
	grpc.ClientStream
}

type blockchainSyncRequestBlockchainSyncClient struct {
	grpc.ClientStream
}

func (x *blockchainSyncRequestBlockchainSyncClient) Recv() (*BlockchainSyncResponse, error) {
	m := new(BlockchainSyncResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockchainSyncClient) RequestBlockHeaders(ctx context.Context, in *BlockHeadersRequest, opts ...grpc.CallOption) (BlockchainSync_RequestBlockHeadersClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlockchainSync_ServiceDesc.Streams[1], "/quantos.pkg.v1.BlockchainSync/RequestBlockHeaders", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockchainSyncRequestBlockHeadersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockchainSync_RequestBlockHeadersClient interface {
	Recv() (*BlockHeadersResponse, error)
	grpc.ClientStream
}

type blockchainSyncRequestBlockHeadersClient struct {
	grpc.ClientStream
}

func (x *blockchainSyncRequestBlockHeadersClient) Recv() (*BlockHeadersResponse, error) {
	m := new(BlockHeadersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlockchainSyncServer is the server API for BlockchainSync service.
// All implementations should embed UnimplementedBlockchainSyncServer
// for forward compatibility
type BlockchainSyncServer interface {
	RequestBlockchainSync(*BlockchainSyncRequest, BlockchainSync_RequestBlockchainSyncServer) error
	RequestBlockHeaders(*BlockHeadersRequest, BlockchainSync_RequestBlockHeadersServer) error
}

// UnimplementedBlockchainSyncServer should be embedded to have forward compatible implementations.
type UnimplementedBlockchainSyncServer struct {
}

func (UnimplementedBlockchainSyncServer) RequestBlockchainSync(*BlockchainSyncRequest, BlockchainSync_RequestBlockchainSyncServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestBlockchainSync not implemented")
}
func (UnimplementedBlockchainSyncServer) RequestBlockHeaders(*BlockHeadersRequest, BlockchainSync_RequestBlockHeadersServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestBlockHeaders not implemented")
}

// UnsafeBlockchainSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockchainSyncServer will
// result in compilation errors.
type UnsafeBlockchainSyncServer interface {
	mustEmbedUnimplementedBlockchainSyncServer()
}

func RegisterBlockchainSyncServer(s grpc.ServiceRegistrar, srv BlockchainSyncServer) {
	s.RegisterService(&BlockchainSync_ServiceDesc, srv)
}

func _BlockchainSync_RequestBlockchainSync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockchainSyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockchainSyncServer).RequestBlockchainSync(m, &blockchainSyncRequestBlockchainSyncServer{stream})
}

type BlockchainSync_RequestBlockchainSyncServer interface {
	Send(*BlockchainSyncResponse) error
	grpc.ServerStream
}

type blockchainSyncRequestBlockchainSyncServer struct {
	grpc.ServerStream
}

func (x *blockchainSyncRequestBlockchainSyncServer) Send(m *BlockchainSyncResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BlockchainSync_RequestBlockHeaders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockHeadersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockchainSyncServer).RequestBlockHeaders(m, &blockchainSyncRequestBlockHeadersServer{stream})
}

type BlockchainSync_RequestBlockHeadersServer interface {
	Send(*BlockHeadersResponse) error
	grpc.ServerStream
}

type blockchainSyncRequestBlockHeadersServer struct {
	grpc.ServerStream
}

func (x *blockchainSyncRequestBlockHeadersServer) Send(m *BlockHeadersResponse) error {
	return x.ServerStream.SendMsg(m)
}

// BlockchainSync_ServiceDesc is the grpc.ServiceDesc for BlockchainSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockchainSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quantos.pkg.v1.BlockchainSync",
	HandlerType: (*BlockchainSyncServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestBlockchainSync",
			Handler:       _BlockchainSync_RequestBlockchainSync_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RequestBlockHeaders",
			Handler:       _BlockchainSync_RequestBlockHeaders_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "quantos/pkg/v1/blockchain.proto",
}
