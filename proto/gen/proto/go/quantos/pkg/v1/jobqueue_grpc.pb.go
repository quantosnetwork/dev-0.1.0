// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: quantos/pkg/v1/jobqueue.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobQueueServiceClient is the client API for JobQueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobQueueServiceClient interface {
	JobStream(ctx context.Context, opts ...grpc.CallOption) (JobQueueService_JobStreamClient, error)
}

type jobQueueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobQueueServiceClient(cc grpc.ClientConnInterface) JobQueueServiceClient {
	return &jobQueueServiceClient{cc}
}

func (c *jobQueueServiceClient) JobStream(ctx context.Context, opts ...grpc.CallOption) (JobQueueService_JobStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobQueueService_ServiceDesc.Streams[0], "/proto.v1.JobQueueService/JobStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobQueueServiceJobStreamClient{stream}
	return x, nil
}

type JobQueueService_JobStreamClient interface {
	Send(*JobStreamRequest) error
	Recv() (*JobStreamResponse, error)
	grpc.ClientStream
}

type jobQueueServiceJobStreamClient struct {
	grpc.ClientStream
}

func (x *jobQueueServiceJobStreamClient) Send(m *JobStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jobQueueServiceJobStreamClient) Recv() (*JobStreamResponse, error) {
	m := new(JobStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobQueueServiceServer is the server API for JobQueueService service.
// All implementations should embed UnimplementedJobQueueServiceServer
// for forward compatibility
type JobQueueServiceServer interface {
	JobStream(JobQueueService_JobStreamServer) error
}

// UnimplementedJobQueueServiceServer should be embedded to have forward compatible implementations.
type UnimplementedJobQueueServiceServer struct {
}

func (UnimplementedJobQueueServiceServer) JobStream(JobQueueService_JobStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method JobStream not implemented")
}

// UnsafeJobQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobQueueServiceServer will
// result in compilation errors.
type UnsafeJobQueueServiceServer interface {
	mustEmbedUnimplementedJobQueueServiceServer()
}

func RegisterJobQueueServiceServer(s grpc.ServiceRegistrar, srv JobQueueServiceServer) {
	s.RegisterService(&JobQueueService_ServiceDesc, srv)
}

func _JobQueueService_JobStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JobQueueServiceServer).JobStream(&jobQueueServiceJobStreamServer{stream})
}

type JobQueueService_JobStreamServer interface {
	Send(*JobStreamResponse) error
	Recv() (*JobStreamRequest, error)
	grpc.ServerStream
}

type jobQueueServiceJobStreamServer struct {
	grpc.ServerStream
}

func (x *jobQueueServiceJobStreamServer) Send(m *JobStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jobQueueServiceJobStreamServer) Recv() (*JobStreamRequest, error) {
	m := new(JobStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobQueueService_ServiceDesc is the grpc.ServiceDesc for JobQueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobQueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.JobQueueService",
	HandlerType: (*JobQueueServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JobStream",
			Handler:       _JobQueueService_JobStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "quantos/pkg/v1/jobqueue.proto",
}
