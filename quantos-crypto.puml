@startuml
namespace pod {
    class DnaOperator << (S,Aquamarine) >> {
        - params TemperProofParams
        - processor *process
        - trainer *Trainer

    }
    interface IOrganism  {
        - calculateFitness(target []byte) 
        - mutate(mutationRate float64) 

    }
    interface ITrainer  {
        - calculateDifficultyOfTarget(target string) float64
        - buildMarkovModel() (*gomarkov.Chain, error)
        - saveMarkovModel(chain *gomarkov.Chain) 
        - loadModel() (*gomarkov.Chain, error)
        - generateProof(chain *gomarkov.Chain) string

        + GetTrainingSet() <font color=blue>map</font>[int]string
        + Train() string

    }
    class MediaOrganism << (S,Aquamarine) >> {
        + DNA *image.RGBA
        + Fitness int64

    }
    class MediaProof << (S,Aquamarine) >> {
        - bwImgResized *image.RGBA
        - bwImgGenerated *image.RGBA

        + MediaType string

        + LoadAndConvert(imagePath string) *image.RGBA

    }
    class Organism << (S,Aquamarine) >> {
        + DNA []byte
        + Fitness float64
        + ParentA []byte
        + ParentB []byte

        - mutate(mutationRate float64) 
        - calculateFitness(target []byte) 

    }
    class Proof << (S,Aquamarine) >> {
        - hash string
        - hmac string
        - isVerified bool

        - verifyProof() bool

    }
    interface TemperProof  {
        - setMutationRate(rate float64) 
        - setParseDuration(dur time.Duration) 
        - setPopulationSize(size uint) 
        - setMaxFitness(fit float64) 
        - setTarget(target []byte) string
        - createOrganism(target []byte) []Organism
        - createPopulation(target []byte, popSize uint) Organism
        - crossover(d1 Organism, d2 Organism) Organism
        - naturalSelection(pool []Organism, population []Organism, target []byte) []Organism
        - loadDictionary() 
        - train() *TrainingDataSet
        - getBest(population []Organism) Organism
        - getMutationRate() float64

    }
    class TemperProofParams << (S,Aquamarine) >> {
        + MutationRate float64
        + ParseDuration time.Duration
        + PopulationSize uint
        + MaxFitness float64

    }
    class Trainer << (S,Aquamarine) >> {
        - calculateDifficultyOfTarget(target string) float64
        - buildMarkovModel() (*gomarkov.Chain, error)
        - saveMarkovModel(chain *gomarkov.Chain) 
        - loadModel() (*gomarkov.Chain, error)
        - generateProof(chain *gomarkov.Chain) string

        + GetTrainingSet() <font color=blue>map</font>[int]string
        + Train() string

    }
    class TrainingData << (S,Aquamarine) >> {
        - blockText string
        - contentText string

    }
    class operator << (S,Aquamarine) >> {
    }
    class pod.TrainingDataSet << (T, #FF7700) >>  {
    }
    class process << (S,Aquamarine) >> {
        - setTarget(trainer *Trainer) string
        - createOrganism(target []byte) Organism
        - createPopulation(target []byte, popSize uint) []Organism
        - createGenePool(maxFitness float64, population []Organism, target []byte) []Organism
        - naturalSelection(mutationRate float64, pool []Organism, population []Organism, target []byte) []Organism
        - crossover(d1 Organism, d2 Organism) Organism
        - getBest(population []Organism) Organism

    }
    class tProof << (S,Aquamarine) >> {
    }
}
"pod.Proof" *-- "pod.MediaProof"
"pod.IOrganism" *-- "pod.Organism"
"pod.ITrainer" *-- "pod.Trainer"
"pod.DnaOperator" *-- "pod.operator"
"pod.TemperProof" *-- "pod.process"
"pod.TemperProof" *-- "pod.tProof"

"pod.IOrganism" <|-- "pod.Organism"
"pod.ITrainer" <|-- "pod.Trainer"

"pod.[]TrainingData" #.. "pod.TrainingDataSet"
@enduml
