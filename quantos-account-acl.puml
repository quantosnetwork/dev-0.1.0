@startuml
namespace account {
    interface ACL  {
        + Guard() error
        + Create() (*ACLManager, error)
        + CreateNewGroup(name string) *Group
        + AddItemsToGroup(gId string, gItem ...*GroupItem) error
        + AddPermission(name string, gId string, r ResourceID, pt PermissionType) error

    }
    class ACLManager << (S,Aquamarine) >> {
        - currentAccount *Account
        - accounts <font color=blue>map</font>[string]*Account
        - blacklist <font color=blue>map</font>[string]bool

        + IsInitialized bool
        + AclContext context.Context

        + Guard() error
        + Create() (*ACLManager, error)
        + CreateNewGroup(name string) *Group
        + AddItemsToGroup(gName string, gItems ...*GroupItem) error
        + AddPermission(name string, gId string, r ResourceID, pt PermissionType) error
        + NewACLManager() *ACLManager

    }
    class Account << (S,Aquamarine) >> {
        + ID string
        + Nickname string
        + Groups <font color=blue>map</font>[string]*Group
        + ACL <font color=blue>map</font>[string]*Permission

        + New(args <font color=blue>map</font>[string]any) *Account
        + NewFromKeys(id string, ownerKey string, activeKey string) *Account
        + GetAddress() string
        + VerifyAddress(addr string) error
        + Dump() 
        + String() string
        + Bytes() []byte

    }
    interface Address  {
        + GenerateNewAddress() *address

    }
    class AddressFileFormat << (S,Aquamarine) >> {
        + EncryptedFile []byte
        + Chksum uint32

    }
    class DecryptedAddressFormat << (S,Aquamarine) >> {
        + Network byte
        + PrivKey []byte
        + PubKey []byte
        + Signature []byte
        + Suite string

    }
    class Group << (S,Aquamarine) >> {
        + Name string
        + Items []*GroupItem

    }
    class GroupItem << (S,Aquamarine) >> {
        + ID string
        + Permission string
        + PermissionID PermissionType
        + Resource ResourceID
        + IsKeyPair bool
        + Weight int

    }
    interface IAccount  {
        + New(args <font color=blue>map</font>[string]any) *Account
        + NewFromKeys(id string, ownerKey string, activeKey string) *Account

    }
    class Keys << (S,Aquamarine) >> {
        - r group.Group
        - shared <font color=blue>map</font>[x25519.Key]x25519.Key
        - dhPub x25519.Key
        - dhPriv x25519.Key
        - privKey []byte

        + PublicKey []byte
        + Sig []byte

        - signPublic(priv ed25519.PrivateKey) []byte

        + Shared(with x25519.Key) 
        + GetLoadedKeys(accID string) *LoadedKeys

    }
    class LoadedKeys << (S,Aquamarine) >> {
        + Priv ed25519.PrivateKey
        + Pub ed25519.PublicKey
        + PubKeySign []byte

    }
    class Permission << (S,Aquamarine) >> {
        + Name string
        + Groups []string
        + Items []*GroupItem
        + Threshold int

    }
    class account.PermissionType << (T, #FF7700) >>  {
    }
    class account.ResourceID << (T, #FF7700) >>  {
    }
    class address << (S,Aquamarine) >> {
        + Network byte
        + PubBytes []byte
        + Private []byte
        + Suite *edwards25519.SuiteEd25519

        + GenerateNewAddress(network byte) *address
        + PrepareForWriting() []byte
        + EncryptFormat(key []byte, data []byte) ([]byte, error)
        + WriteAndLock(key []byte) error

    }
}

"account.ACL" <|-- "account.ACLManager"
"account.IAccount" <|-- "account.Account"

"__builtin__.uint32" #.. "account.PermissionType"
"__builtin__.uint32" #.. "account.ResourceID"
@enduml
